<?php

namespace Vifeed\CampaignBundle\Repository;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Query;
use Vifeed\CampaignBundle\Entity\Campaign;
use Vifeed\SystemBundle\Repository\DoctrineFilterTrait;
use Vifeed\UserBundle\Entity\User;

/**
 * CampaignRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class CampaignRepository extends EntityRepository
{
    use DoctrineFilterTrait;

    /**
     * @param User $user
     * @param bool $alsoDeleted
     *
     * @return Campaign[]
     */
    public function findByUserIndexed(User $user, $alsoDeleted = false)
    {
        $alsoDeleted ? $this->disableSoftDeleteableFilter() : '';

        $qb = $this->getEntityManager()->createQueryBuilder();
        $query = $qb->select('c')
                    ->from('VifeedCampaignBundle:Campaign', 'c', 'c.id')
                    ->where('c.user = :user')
                    ->setParameter('user', $user);

        $campaigns = $query->getQuery()->getResult();

        $alsoDeleted ? $this->enableSoftDeleteableFilter() : '';

        return $campaigns;
    }

    /**
     * @return Campaign[]
     */
    public function getActiveCampaigns()
    {
        return $this->findByStatus(Campaign::STATUS_ON);
    }

    /**
     * @param array $params
     *
     * @return \Doctrine\ORM\QueryBuilder
     */
    public function getCampaignsByParamsQuery($params)
    {
        $qb = $this->createQueryBuilder('c');
        $query = $qb->select('c');

        if (isset($params['user'])) {
            $query->andWhere('c.user = :user')
                  ->setParameter('user', $params['user']);
        }
        if (isset($params['status'])) {
            $query->andWhere('c.status = :status')
                  ->setParameter('status', $params['status']);
        }
        if (isset($params['countries']) && !empty($params['countries'])) {
            $query->leftJoin('c.countries', 'country')
                  ->andWhere('country.id IN (:countries) OR country.id IS NULL')
                  ->setParameter('countries', $params['countries']);
        }

        if (isset($params['order'])) {
            foreach ($params['order'] as $orderby) {
                $query->addOrderBy('c.' . $orderby[0], isset($orderby[1]) ? $orderby[1] : null);
            }
        }

        return $query;
    }

    /**
     * массив кампаний с ключами в виде id
     */
    public function getIndexedById($collection)
    {
        $indexed = [];
        foreach ($collection as $element) {
            $indexed[$element->getId()] = $element;
        }

        return $indexed;
    }

    /**
     * @param Campaign $campaign
     * @param          $value
     */
    public function updateBalance(Campaign $campaign, $value)
    {
        $qb = $this->getUpdateBalanceQuery($campaign, $value);
        $qb->getQuery()->execute();
    }

    /**
     * @param Campaign $campaign
     */
    public function addPaidView(Campaign $campaign)
    {
        $qb = $this->getUpdateBalanceQuery($campaign, -$campaign->getBid())
                   ->set('c.dailyBudgetUsed', 'c.dailyBudgetUsed - :value')
                   ->set('c.generalBudgetUsed', 'c.generalBudgetUsed - :value')
                   ->set('c.paidViews', 'c.paidViews + 1')
                   ->set('c.totalViews', 'c.totalViews + 1');
        $qb->getQuery()->execute();
    }

    /**
     * @param Campaign $campaign
     */
    public function incrementTotalViews(Campaign $campaign)
    {
        $qb = $this->createQueryBuilder('c')
                   ->update('VifeedCampaignBundle:Campaign', 'c')
                   ->set('c.totalViews', 'c.totalViews + 1')
                   ->where('c = :campaign')
                   ->setParameter('campaign', $campaign);
        $qb->getQuery()->execute();
    }


    /**
     * @param Campaign $campaign
     * @param          $value
     *
     * @return \Doctrine\ORM\QueryBuilder
     */
    private function getUpdateBalanceQuery(Campaign $campaign, $value)
    {
        $qb = $this->createQueryBuilder('c')
                   ->update('VifeedCampaignBundle:Campaign', 'c')
                   ->set('c.balance', 'c.balance + :value')
                   ->where('c = :campaign')
                   ->setParameters([
                                         'campaign' => $campaign,
                                         'value'    => $value
                                   ]);

        return $qb;
    }

}
