<?php

namespace Vifeed\VideoViewBundle\Repository;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Query\Expr\Join;
use Vifeed\CampaignBundle\Entity\Campaign;
use Vifeed\GeoBundle\Entity\Country;
use Vifeed\VideoViewBundle\Entity\VideoView;

/**
 * VideoViewRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class VideoViewRepository extends EntityRepository
{
    /**
     * Статистика по кампаниям за период
     *
     * @param Campaign[] $campaigns
     * @param \DateTime  $dateFrom
     * @param \DateTime  $dateTo
     *
     * @return array
     */
    public function getCampaignFinancialStats(array $campaigns, \DateTime $dateFrom, \DateTime $dateTo)
    {
        $query = $this->getCampaignFinancialStatsQuery()
                      ->addSelect('IDENTITY(v.campaign) AS campaign_id')
                      ->groupBy('v.campaign');

        $query->setParameters(
              ['campaigns' => $campaigns,
               'date_from' => $dateFrom->format('U'),
               'date_to'   => $dateTo->format('U')]
        );

        $stats = $query->getQuery()->getResult();

        return $stats;
    }

    /**
     * Статистика по одной кампании за период с группировкой по дням
     *
     * @param Campaign  $campaign
     * @param \DateTime $dateFrom
     * @param \DateTime $dateTo
     *
     * @return array
     */
    public function getCampaignFinancialStatsByDay(Campaign $campaign, \DateTime $dateFrom, \DateTime $dateTo)
    {
        $query = $this->getCampaignFinancialStatsQuery()
                      ->addSelect('DATE_FORMAT(FROM_UNIXTIME(v.timestamp), \'%Y-%m-%d\') AS date')
                      ->addGroupBy('date')
                      ->orderBy('date');

        $query->setParameters(
              ['campaigns' => [$campaign],
               'date_from' => $dateFrom->format('U'),
               'date_to'   => $dateTo->format('U')]
        );

        $stats = $query->getQuery()->getResult();

        return $stats;
    }

    /**
     * @param Campaign  $campaign
     * @param \DateTime $dateFrom
     * @param \DateTime $dateTo
     *
     * @return array
     */
    public function getDailyViewsAndShows(Campaign $campaign, \DateTime $dateFrom, \DateTime $dateTo)
    {
        $query = $this->getCampaignViewsQuery()
                      ->addSelect('DATE_FORMAT(FROM_UNIXTIME(v.timestamp), \'%Y-%m-%d\') AS date')
                      ->addGroupBy('date')
                      ->orderBy('date');

        $query->setParameters(
              ['campaigns' => [$campaign],
               'date_from' => $dateFrom->format('U'),
               'date_to'   => $dateTo->format('U')]
        );

        return $query->getQuery()->getResult();
    }

    /**
     * @param Campaign  $campaign
     * @param \DateTime $dateFrom
     * @param \DateTime $dateTo
     *
     * @return array
     */
    public function getHourlyViewsAndShows(Campaign $campaign, \DateTime $dateFrom, \DateTime $dateTo)
    {
        $query = $this->getCampaignViewsQuery()
                      ->addSelect('DATE_FORMAT(FROM_UNIXTIME(v.timestamp), \'%H\') AS hour')
                      ->addGroupBy('hour')
                      ->orderBy('hour');

        $query->setParameters(
              ['campaigns' => [$campaign],
               'date_from' => $dateFrom->format('U'),
               'date_to'   => $dateTo->format('U')]
        );

        return $query->getQuery()->getResult();
    }

    /**
     * @param Campaign     $campaign
     * @param \DateTime    $dateFrom
     * @param \DateTime    $dateTo
     * @param Country|null $country
     *
     * @return array
     */
    public function getGeoViewsByCity(Campaign $campaign, \DateTime $dateFrom, \DateTime $dateTo, Country $country = null)
    {
        $query = $this->getGeoViewsQuery()
                      ->addSelect('city.name, city.id AS city_id, city.latitude, city.longitude')
                      ->leftJoin('v.city', 'city')
                      ->addGroupBy('v.city')
                      ->addOrderBy('city.name');

        $query->setParameters(
              ['campaign'  => $campaign,
               'date_from' => $dateFrom->format('U'),
               'date_to'   => $dateTo->format('U')]
        );

        if ($country !== null) {
            $query->andWhere('v.country = :country')
                  ->setParameter('country', $country);
        }

        return $query->getQuery()->getResult();
    }

    /**
     * @param Campaign  $campaign
     * @param \DateTime $dateFrom
     * @param \DateTime $dateTo
     *
     * @return array
     */
    public function getGeoViewsByCountry(Campaign $campaign, \DateTime $dateFrom, \DateTime $dateTo)
    {
        $query = $this->getGeoViewsQuery()
                      ->addSelect('country.name, country.id AS country_id')
                      ->leftJoin('v.country', 'country')
                      ->addGroupBy('v.country')
                      ->addOrderBy('country.name');

        $query->setParameters(
              ['campaign'  => $campaign,
               'date_from' => $dateFrom->format('U'),
               'date_to'   => $dateTo->format('U')]
        );

        return $query->getQuery()->getResult();
    }

    /**
     * комбинации кампаний и площадок, на которых были просмотры
     */
    public function getCampaignPlatforms($campaigns = [])
    {
        $query = $this->createQueryBuilder('v')
                      ->select('p.hashId as platformHash')
                      ->addSelect('IDENTITY(v.campaign) as campaignId')
                      ->innerJoin('v.platform', 'p')
                      ->groupBy('v.campaign')
                      ->addGroupBy('v.platform')
                      ->orderBy('v.campaign');

        if ($campaigns) {
            if (!is_array($campaigns)) {
                $campaigns = [$campaigns];
            }
            $query->where('v.campaign IN (:campaigns)')
                  ->setParameter('campaigns', $campaigns);
        }

        return $query->getQuery()->getResult();
    }

    /**
     * количество площадок, на которых были показы кампании
     *
     * @deprecated с 10.09.2014
     */
    public function getCampaignPlatformsCount(Campaign $campaign)
    {
        $query = $this->createQueryBuilder('v')
                      ->select('COUNT(DISTINCT v.platform)')
                      ->where('v.campaign = :campaign')
                      ->setParameter('campaign', $campaign);

        return $query->getQuery()->getSingleScalarResult();
    }


    /**
     * @param VideoView $videoView
     *
     * @return boolean
     */
    public function wasCampaignViewedBeforeByThisUser(VideoView $videoView)
    {
        $query = $this->createQueryBuilder('v')
                      ->select('1')
                      ->where('v.viewerId = :viewerId')
                      ->andWhere('v.campaign = :campaign')
                      ->andWhere('v.isPaid = true')
                      ->andWhere('v.timestamp > :timestamp')
                      ->setParameters([
                                            'campaign'  => $videoView->getCampaign(),
                                            'viewerId'  => $videoView->getViewerId(),
                                            'timestamp' => ($videoView->getTimestamp() - 2592000) // за 30 дней
                                      ]);

        return (bool) $query->getQuery()->getOneOrNullResult();
    }

    /**
     * @param VideoView $videoView
     * @param int       $time
     * @param Campaign  $campaign
     *
     * @return int
     */
    public function getSameIpViewsCount(VideoView $videoView, $time, Campaign $campaign = null)
    {
        $query = $this->createQueryBuilder('v')
                      ->select('COUNT(v)')
                      ->where('v.ip = :ip')
                      ->andWhere('v.id != :id')
                      ->andWhere('v.isPaid = true')
                      ->setParameters([
                                            'id'   => $videoView->getId(),
                                            'ip'   => $videoView->getIp(),
                                      ]);
        if ($time > 0) {
            $query->andWhere('v.timestamp > :time')
                  ->setParameter('time', $videoView->getTimestamp() - $time);
        }
        if ($campaign) {
            $query->andWhere('v.campaign = :campaign')
                  ->setParameter('campaign', $campaign);
        }

        return $query->getQuery()->getSingleScalarResult();
    }

    /**
     * @return \Doctrine\ORM\QueryBuilder
     */
    private function getCampaignViewsQuery()
    {
        $qb = $this->createQueryBuilder('v');

        $query = $qb->select('COUNT(DISTINCT v.viewerId) AS views')
                    ->addSelect('COUNT(p.videoView) AS paid_views')
                    ->leftJoin('VifeedPaymentBundle:VideoViewPayment', 'p', Join::WITH, 'p.videoView = v')
                    ->where('v.campaign IN (:campaigns)')
                    ->andWhere(($qb->expr()->eq('v.isInStats', $qb->expr()->literal(true))))
                    ->andWhere('v.timestamp BETWEEN :date_from AND :date_to');

        return $query;
    }

    /**
     * @return \Doctrine\ORM\QueryBuilder
     */
    private function getCampaignFinancialStatsQuery()
    {
        $query = $this->getCampaignViewsQuery()
                      ->addSelect('SUM(p.charged) AS charged');

        return $query;

    }

    /**
     *
     * @return \Doctrine\ORM\QueryBuilder
     */
    private function getGeoViewsQuery()
    {
        $qb = $this->createQueryBuilder('v');

        $query = $qb
              ->select('COUNT(DISTINCT v.viewerId) AS views')
              ->where('v.timestamp BETWEEN :date_from AND :date_to')
              ->andWhere('v.campaign = :campaign')
              ->andWhere(($qb->expr()->eq('v.isInStats', $qb->expr()->literal(true))))
              ->orderBy('views', 'desc');

        return $query;
    }


}
