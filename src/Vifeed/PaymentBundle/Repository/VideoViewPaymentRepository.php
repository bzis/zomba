<?php

namespace Vifeed\PaymentBundle\Repository;

use Doctrine\ORM\EntityRepository;
use Vifeed\CampaignBundle\Entity\Campaign;
use Vifeed\PlatformBundle\Entity\Platform;

/**
 * VideoViewPaymentRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class VideoViewPaymentRepository extends EntityRepository
{


    /**
     * Статистика по площадкам за период
     *
     * @param Platform[] $platforms
     * @param \DateTime  $dateFrom
     * @param \DateTime  $dateTo
     *
     * @return array
     */
    public function getPlatformStats(array $platforms, \DateTime $dateFrom, \DateTime $dateTo)
    {
        $query = $this->getPlatformStatsQuery()
                      ->addSelect('IDENTITY(v.platform) AS platform_id')
                      ->groupBy('v.platform');

        $query->setParameters(
              ['platforms' => $platforms,
               'date_from' => $dateFrom->format('U'),
               'date_to'   => $dateTo->format('U')]
        );

        $stats = $query->getQuery()->getResult();

        return $stats;
    }

    /**
     * Статистика по одной площадке с группировкой по дням
     * @param Platform  $platform
     * @param \DateTime $dateFrom
     * @param \DateTime $dateTo
     *
     * @return array
     */
    public function getPlatformStatsByDay(Platform $platform, \DateTime $dateFrom, \DateTime $dateTo)
    {
        $query = $this->getPlatformStatsQuery()
                      ->addSelect('DATE_FORMAT(FROM_UNIXTIME(v.timestamp), \'%Y-%m-%d\') AS date')
                      ->addGroupBy('date')
                      ->orderBy('date');

        $query->setParameters(
              ['platforms' => [$platform],
               'date_from' => $dateFrom->format('U'),
               'date_to'   => $dateTo->format('U')]
        );

        $stats = $query->getQuery()->getResult();

        return $stats;
    }

    /**
     * Query для статистики по площадкам
     *
     * @return \Doctrine\ORM\QueryBuilder
     */
    private function getPlatformStatsQuery()
    {
        $qb = $this->createQueryBuilder('p');

        $query = $qb->select('COUNT(v.platform) AS views')
                    ->addSelect('SUM(p.paid) AS earned')
                    ->innerJoin('p.videoView', 'v')
                    ->where('v.platform IN (:platforms)')
                    ->andWhere('v.timestamp BETWEEN :date_from AND :date_to');

        return $query;
    }

}
